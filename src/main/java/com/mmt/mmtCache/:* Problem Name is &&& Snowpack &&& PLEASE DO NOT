/* Problem Name is &&& Snowpack &&& PLEASE DO NOT REMOVE THIS LINE. */

/*
** Instructions to candidate.
**  1) Given an array of non-negative integers representing the elevations
**     from the vertical cross section of a range of hills, determine how
**     many units of snow could be captured between the hills. 
**
**     See the example array and elevation map below.
**                                 ___
**             ___                |   |        ___
**            |   |        ___    |   |___    |   |
**         ___|   |    ___|   |   |   |   |   |   |
**     ___|___|___|___|___|___|___|___|___|___|___|___
**     {0,  1,  3,  0,  1,  2,  0,  4,  2,  0,  3,  0}
**                                 ___
**             ___                |   |        ___
**            |   | *   *  _*_  * |   |_*_  * |   |
**         ___|   | *  _*_|   | * |   |   | * |   |
**     ___|___|___|_*_|___|___|_*_|___|___|_*_|___|___
**     {0,  1,  3,  0,  1,  2,  0,  4,  2,  0,  3,  0}
**
**     Solution: In this example 13 units of snow (*) could be captured.
**  
**  2) Consider adding some additional tests in doTestsPass().
**  3) Implement computeSnowpack() correctly.
*/

import java.io.*;
import java.util.*;

class Solution
{
  /*
  **  Find the amount of snow that could be captured.
  */
  public static Integer computeSnowpack(Integer[] arr)
  {
  // Todo: Implement computeSnowpack
    
    Integer start=arr[0];
    int startIndex=0;
    Integer sumLast=0;
    Integer max=0;
    int maxi=0;
    
    Integer sum=0;
    for(int i=1;i<arr.length;i++){
      if(arr[i]>=start){
        start = arr[i];
        startIndex=i;
        sumLast=sum;
       max=0;
      }else{
        if(arr[i]>max){
          max=arr[i];
          maxi=i;
          
        }
          sum+= start-arr[i];
      }
      
 
      
    }
    
        
    int end = arr[arr.length-1];
    
    int diff = start-end;
    
     System.out.println(startIndex);
    System.out.println(max);
    for(int i=startIndex+1;arr[i]<max && i<maxi && i<arr.length;i++){
      
        sumLast+=max-arr[i];
        
  
      
    }
    
      System.out.println(sumLast);
    
    
    
    
  return sumLast;
  }

  /*
  **  Returns true if the tests pass. Otherwise, returns false;
  */
  public static boolean doTestsPass()
  {
  boolean result = true;
  result &= computeSnowpack(new Integer[]{0,1,3,0,1,2,0,4,2,0,3,0}) == 13;
  result &= computeSnowpack(new Integer[]{}) == 0;
  return result;
  }

  /*
  **  Execution entry point.
  */
  public static void main(String[] args)
  {
  if(doTestsPass())
  {
    System.out.println("All tests pass");
  }
  else
  {
    System.out.println("Tests fail.");
  }
  }
}
